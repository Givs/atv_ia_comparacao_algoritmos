# Mapeamento dos dados conforme o relat√≥rio "Comparing many search algorithms".
# Para cada problema, cada algoritmo (astar_search, uniform_cost_search, etc.)
# tem os valores: nodes, goal, cost e actions.
dados = {
    "PourProblem((1, 1, 1), 13)": {
        "astar_search":               {"nodes": 948,  "goal": 109, "cost": 4,  "actions": 112},
        "uniform_cost_search":        {"nodes": 948,  "goal": 109, "cost": 4,  "actions": 112},
        "breadth_first_search":       {"nodes": 596,  "goal": 597, "cost": 4,  "actions": 73},
        "breadth_first_bfs":          {"nodes": 948,  "goal": 109, "cost": 4,  "actions": 112},
        "iterative_deepening_search": {"nodes": 6133, "goal": 6118, "cost": 4,  "actions": 822},
        "depth_limited_search":       {"nodes": 4433, "goal": 4374, "cost": 10, "actions": 627},
        "greedy_bfs":                 {"nodes": 948,  "goal": 109, "cost": 4,  "actions": 112},
        "weighted_astar_search":      {"nodes": 948,  "goal": 109, "cost": 4,  "actions": 112},
        "extra_weighted_astar_search":{"nodes": 948,  "goal": 109, "cost": 4,  "actions": 112},
    },
    "GreenPourProblem((1, 1, 1), 13)": {
        "astar_search":               {"nodes": 1696, "goal": 190, "cost": 10, "actions": 204},
        "uniform_cost_search":        {"nodes": 1696, "goal": 190, "cost": 10, "actions": 204},
        "breadth_first_search":       {"nodes": 596,  "goal": 597, "cost": 15, "actions": 73},
        "breadth_first_bfs":          {"nodes": 1062, "goal": 124, "cost": 15, "actions": 127},
        "iterative_deepening_search": {"nodes": 6133, "goal": 6118, "cost": 15, "actions": 822},
        "depth_limited_search":       {"nodes": 4433, "goal": 4374, "cost": 30, "actions": 627},
        "greedy_bfs":                 {"nodes": 1696, "goal": 190, "cost": 10, "actions": 204},
        "weighted_astar_search":      {"nodes": 1696, "goal": 190, "cost": 10, "actions": 204},
        "extra_weighted_astar_search":{"nodes": 1696, "goal": 190, "cost": 10, "actions": 204},
    },
    "PourProblem((0, 0, 0), 21)_1": {
        "astar_search":               {"nodes": 3499, "goal": 389, "cost": 9,  "actions": 397},
        "uniform_cost_search":        {"nodes": 3499, "goal": 389, "cost": 9,  "actions": 397},
        "breadth_first_search":       {"nodes": 2618, "goal": 2619,"cost": 9,  "actions": 302},
        "breadth_first_bfs":          {"nodes": 3499, "goal": 389, "cost": 9,  "actions": 397},
        "iterative_deepening_search": {"nodes": 288706,"goal": 288675,"cost": 9,  "actions": 36962},
        "depth_limited_search":       {"nodes": 37149, "goal": 37106,"cost": 10, "actions": 4753},
        "greedy_bfs":                 {"nodes": 3499, "goal": 389, "cost": 9,  "actions": 397},
        "weighted_astar_search":      {"nodes": 3499, "goal": 389, "cost": 9,  "actions": 397},
        "extra_weighted_astar_search":{"nodes": 3499, "goal": 389, "cost": 9,  "actions": 397},
    },
    "GreenPourProblem((0, 0, 0), 21)_1": {
        "astar_search":               {"nodes": 4072, "goal": 454, "cost": 21, "actions": 463},
        "uniform_cost_search":        {"nodes": 4072, "goal": 454, "cost": 21, "actions": 463},
        "breadth_first_search":       {"nodes": 2618, "goal": 2619,"cost": 32, "actions": 302},
        "breadth_first_bfs":          {"nodes": 3757, "goal": 420, "cost": 24, "actions": 428},
        "iterative_deepening_search": {"nodes": 288706,"goal": 288675,"cost": 62, "actions": 36962},
        "depth_limited_search":       {"nodes": 37149, "goal": 37106,"cost": 54, "actions": 4753},
        "greedy_bfs":                 {"nodes": 4072, "goal": 454, "cost": 21, "actions": 463},
        "weighted_astar_search":      {"nodes": 4072, "goal": 454, "cost": 21, "actions": 463},
        "extra_weighted_astar_search":{"nodes": 4072, "goal": 454, "cost": 21, "actions": 463},
    },
    "PourProblem((0, 0), 8)": {
        "astar_search":               {"nodes": 124,  "goal": 30,  "cost": 14, "actions": 43},
        "uniform_cost_search":        {"nodes": 124,  "goal": 30,  "cost": 14, "actions": 43},
        "breadth_first_search":       {"nodes": 120,  "goal": 121, "cost": 14, "actions": 42},
        "breadth_first_bfs":          {"nodes": 124,  "goal": 30,  "cost": 14, "actions": 43},
        "iterative_deepening_search": {"nodes": 3840, "goal": 3824, "cost": 14, "actions": 949},
        "depth_limited_search":       {"nodes": 452,  "goal": 453, "cost": float('inf'), "actions": 110},
        "greedy_bfs":                 {"nodes": 124,  "goal": 30,  "cost": 14, "actions": 43},
        "weighted_astar_search":      {"nodes": 124,  "goal": 30,  "cost": 14, "actions": 43},
        "extra_weighted_astar_search":{"nodes": 124,  "goal": 30,  "cost": 14, "actions": 43},
    },
    "GreenPourProblem((0, 0), 8)": {
        "astar_search":               {"nodes": 124,  "goal": 30,  "cost": 35, "actions": 45},
        "uniform_cost_search":        {"nodes": 124,  "goal": 30,  "cost": 35, "actions": 45},
        "breadth_first_search":       {"nodes": 120,  "goal": 121, "cost": 36, "actions": 42},
        "breadth_first_bfs":          {"nodes": 124,  "goal": 30,  "cost": 36, "actions": 43},
        "iterative_deepening_search": {"nodes": 3840, "goal": 3824, "cost": 36, "actions": 949},
        "depth_limited_search":       {"nodes": 452,  "goal": 453, "cost": float('inf'), "actions": 110},
        "greedy_bfs":                 {"nodes": 124,  "goal": 30,  "cost": 35, "actions": 45},
        "weighted_astar_search":      {"nodes": 124,  "goal": 30,  "cost": 35, "actions": 45},
        "extra_weighted_astar_search":{"nodes": 124,  "goal": 30,  "cost": 35, "actions": 45},
    },
    "PourProblem((0, 0, 0), 21)_2": {
        "astar_search":               {"nodes": 3499, "goal": 389, "cost": 9,  "actions": 397},
        "uniform_cost_search":        {"nodes": 3499, "goal": 389, "cost": 9,  "actions": 397},
        "breadth_first_search":       {"nodes": 2618, "goal": 2619,"cost": 9,  "actions": 302},
        "breadth_first_bfs":          {"nodes": 3499, "goal": 389, "cost": 9,  "actions": 397},
        "iterative_deepening_search": {"nodes": 288706,"goal": 288675,"cost": 9,  "actions": 36962},
        "depth_limited_search":       {"nodes": 37149, "goal": 37106,"cost": 10, "actions": 4753},
        "greedy_bfs":                 {"nodes": 3499, "goal": 389, "cost": 9,  "actions": 397},
        "weighted_astar_search":      {"nodes": 3499, "goal": 389, "cost": 9,  "actions": 397},
        "extra_weighted_astar_search":{"nodes": 3499, "goal": 389, "cost": 9,  "actions": 397},
    },
    "GreenPourProblem((0, 0, 0), 21)_2": {
        "astar_search":               {"nodes": 4072, "goal": 454, "cost": 21, "actions": 463},
        "uniform_cost_search":        {"nodes": 4072, "goal": 454, "cost": 21, "actions": 463},
        "breadth_first_search":       {"nodes": 2618, "goal": 2619,"cost": 32, "actions": 302},
        "breadth_first_bfs":          {"nodes": 3757, "goal": 420, "cost": 24, "actions": 428},
        "iterative_deepening_search": {"nodes": 288706,"goal": 288675,"cost": 62, "actions": 36962},
        "depth_limited_search":       {"nodes": 37149, "goal": 37106,"cost": 54, "actions": 4753},
        "greedy_bfs":                 {"nodes": 4072, "goal": 454, "cost": 21, "actions": 463},
        "weighted_astar_search":      {"nodes": 4072, "goal": 454, "cost": 21, "actions": 463},
        "extra_weighted_astar_search":{"nodes": 4072, "goal": 454, "cost": 21, "actions": 463},
    },
    "RouteProblem('A', 'A')": {
        "astar_search":               {"nodes": 0,  "goal": 1,  "cost": 0,   "actions": 0},
        "uniform_cost_search":        {"nodes": 0,  "goal": 1,  "cost": 0,   "actions": 0},
        "breadth_first_search":       {"nodes": 0,  "goal": 1,  "cost": 0,   "actions": 0},
        "breadth_first_bfs":          {"nodes": 0,  "goal": 1,  "cost": 0,   "actions": 0},
        "iterative_deepening_search": {"nodes": 0,  "goal": 1,  "cost": 0,   "actions": 0},
        "depth_limited_search":       {"nodes": 0,  "goal": 1,  "cost": 0,   "actions": 0},
        "greedy_bfs":                 {"nodes": 0,  "goal": 1,  "cost": 0,   "actions": 0},
        "weighted_astar_search":      {"nodes": 0,  "goal": 1,  "cost": 0,   "actions": 0},
        "extra_weighted_astar_search":{"nodes": 0,  "goal": 1,  "cost": 0,   "actions": 0},
    },
    "RouteProblem('A', 'B')": {
        "astar_search":               {"nodes": 15, "goal": 6,  "cost": 418, "actions": 9},
        "uniform_cost_search":        {"nodes": 30, "goal": 13, "cost": 418, "actions": 16},
        "breadth_first_search":       {"nodes": 18, "goal": 19, "cost": 450, "actions": 10},
        "breadth_first_bfs":          {"nodes": 28, "goal": 12, "cost": 450, "actions": 14},
        "iterative_deepening_search": {"nodes": 27, "goal": 25, "cost": 450, "actions": 13},
        "depth_limited_search":       {"nodes": 17, "goal": 8,  "cost": 733, "actions": 14},
        "greedy_bfs":                 {"nodes": 9,  "goal": 4,  "cost": 450, "actions": 6},
        "weighted_astar_search":      {"nodes": 9,  "goal": 4,  "cost": 450, "actions": 6},
        "extra_weighted_astar_search":{"nodes": 9,  "goal": 4,  "cost": 450, "actions": 6},
    },
    "RouteProblem('N', 'L')": {
        "astar_search":               {"nodes": 34, "goal": 15, "cost": 910, "actions": 23},
        "uniform_cost_search":        {"nodes": 42, "goal": 19, "cost": 910, "actions": 27},
        "breadth_first_search":       {"nodes": 42, "goal": 43, "cost": 1085,"actions": 27},
        "breadth_first_bfs":          {"nodes": 55, "goal": 24, "cost": 910, "actions": 32},
        "iterative_deepening_search": {"nodes": 167, "goal": 173,"cost": 910, "actions": 82},
        "depth_limited_search":       {"nodes": 40, "goal": 38, "cost": 910, "actions": 26},
        "greedy_bfs":                 {"nodes": 29, "goal": 12, "cost": 910, "actions": 20},
        "weighted_astar_search":      {"nodes": 32, "goal": 14, "cost": 910, "actions": 22},
        "extra_weighted_astar_search":{"nodes": 29, "goal": 12, "cost": 910, "actions": 20},
    },
    "RouteProblem('E', 'T')": {
        "astar_search":               {"nodes": 33, "goal": 14, "cost": 805, "actions": 21},
        "uniform_cost_search":        {"nodes": 44, "goal": 20, "cost": 805, "actions": 27},
        "breadth_first_search":       {"nodes": 36, "goal": 37, "cost": 837, "actions": 22},
        "breadth_first_bfs":          {"nodes": 51, "goal": 22, "cost": 837, "actions": 28},
        "iterative_deepening_search": {"nodes": 117, "goal": 120,"cost": 837, "actions": 56},
        "depth_limited_search":       {"nodes": 29, "goal": 23, "cost": 992, "actions": 20},
        "greedy_bfs":                 {"nodes": 19, "goal": 8,  "cost": 837, "actions": 14},
        "weighted_astar_search":      {"nodes": 29, "goal": 12, "cost": 805, "actions": 19},
        "extra_weighted_astar_search":{"nodes": 23, "goal": 9,  "cost": 805, "actions": 16},
    },
    "RouteProblem('O', 'M')": {
        "astar_search":               {"nodes": 20, "goal": 9,  "cost": 445, "actions": 13},
        "uniform_cost_search":        {"nodes": 30, "goal": 12, "cost": 445, "actions": 16},
        "breadth_first_search":       {"nodes": 30, "goal": 31, "cost": 445, "actions": 16},
        "breadth_first_bfs":          {"nodes": 40, "goal": 16, "cost": 445, "actions": 20},
        "iterative_deepening_search": {"nodes": 108, "goal": 109,"cost": 572, "actions": 44},
        "depth_limited_search":       {"nodes": 35, "goal": 29, "cost": 895, "actions": 22},
        "greedy_bfs":                 {"nodes": 14, "goal": 6,  "cost": 445, "actions": 10},
        "weighted_astar_search":      {"nodes": 18, "goal": 8,  "cost": 445, "actions": 12},
        "extra_weighted_astar_search":{"nodes": 18, "goal": 8,  "cost": 445, "actions": 12},
    },
    "EightPuzzle((1, 4, 2, 0, 7, 5, 3, 6, 8), ...)": {
        "astar_search":               {"nodes": 15,   "goal": 6,    "cost": 5,   "actions": 10},
        "uniform_cost_search":        {"nodes": 15,   "goal": 6,    "cost": 5,   "actions": 10},
        "breadth_first_search":       {"nodes": 124,  "goal": 46,   "cost": 5,   "actions": 50},
        "breadth_first_bfs":          {"nodes": 124,  "goal": 46,   "cost": 5,   "actions": 50},
        "iterative_deepening_search": {"nodes": 116,  "goal": 118,  "cost": 5,   "actions": 47},
        "depth_limited_search":       {"nodes": 351,  "goal": 349,  "cost": 5,   "actions": 138},
        "greedy_bfs":                 {"nodes": 15,   "goal": 6,    "cost": 5,   "actions": 10},
        "weighted_astar_search":      {"nodes": 15,   "goal": 6,    "cost": 5,   "actions": 10},
        "extra_weighted_astar_search":{"nodes": 15,   "goal": 6,    "cost": 5,   "actions": 10},
    },
}

# Lista dos nomes dos problemas (chaves do dicion√°rio)
nomes_problemas = list(dados.keys())
